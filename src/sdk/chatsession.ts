/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export enum CreateAcceptEnum {
    applicationJson = "application/json",
    textEventStream = "text/event-stream",
}

export enum ContinueAcceptEnum {
    applicationJson = "application/json",
    textEventStream = "text/event-stream",
}

export class ChatSession extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create Chat Session and receive a Chat Result
     */
    async create(
        input: components.CreateChatSessionWithChatResultInput,
        options?: RequestOptions & { acceptHeaderOverride?: CreateAcceptEnum }
    ): Promise<operations.CreateResponse> {
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept =
            options?.acceptHeaderOverride || "application/json;q=1, text/event-stream;q=0";
        headers$.set("Accept", accept);

        const payload$ =
            components.CreateChatSessionWithChatResultInput$.outboundSchema.parse(input);
        const body$ = enc$.encodeJSON("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/v0/chat_sessions/chat_results")();

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.CreateResponse$.inboundSchema.parse({
                ...responseFields$,
                ChatResult: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 200, "text/event-stream")) {
            const result = operations.CreateResponse$.inboundSchema.parse({
                ...responseFields$,
                ChatResultStream: response.body,
            });
            return result;
        } else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = errors.HTTPValidationError$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Continue Chat Session and receive a Chat Result
     */
    async continue(
        chatSessionId: string,
        continueChatSessionWithChatResultInput: components.ContinueChatSessionWithChatResultInput,
        options?: RequestOptions & { acceptHeaderOverride?: ContinueAcceptEnum }
    ): Promise<operations.ContinueResponse> {
        const input$: operations.ContinueRequest = {
            chatSessionId: chatSessionId,
            continueChatSessionWithChatResultInput: continueChatSessionWithChatResultInput,
        };
        const headers$ = new Headers();
        headers$.set("user-agent", SDK_METADATA.userAgent);
        headers$.set("Content-Type", "application/json");

        const accept =
            options?.acceptHeaderOverride || "application/json;q=1, text/event-stream;q=0";
        headers$.set("Accept", accept);

        const payload$ = operations.ContinueRequest$.outboundSchema.parse(input$);

        const body$ = enc$.encodeJSON("body", payload$.ContinueChatSessionWithChatResultInput, {
            explode: true,
        });

        const pathParams$ = {
            chat_session_id: enc$.encodeSimple("chat_session_id", payload$.chat_session_id, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path$ = this.templateURLComponent("/v0/chat_sessions/{chat_session_id}/chat_results")(
            pathParams$
        );

        let security$;
        if (typeof this.options$.apiKey === "function") {
            security$ = { apiKey: await this.options$.apiKey() };
        } else if (this.options$.apiKey) {
            security$ = { apiKey: this.options$.apiKey };
        } else {
            security$ = {};
        }
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const response = await this.fetch$(
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                body: body$,
            },
            options
        );

        const responseFields$ = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = operations.ContinueResponse$.inboundSchema.parse({
                ...responseFields$,
                ChatResult: responseBody,
            });
            return result;
        } else if (this.matchResponse(response, 200, "text/event-stream")) {
            const result = operations.ContinueResponse$.inboundSchema.parse({
                ...responseFields$,
                ChatResultStream: response.body,
            });
            return result;
        } else if (this.matchResponse(response, 422, "application/json")) {
            const responseBody = await response.json();
            const result = errors.HTTPValidationError$.inboundSchema.parse({
                ...responseFields$,
                ...responseBody,
            });
            throw result;
        } else {
            const responseBody = await response.text();
            throw new errors.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
