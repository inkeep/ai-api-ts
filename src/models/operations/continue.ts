/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EventStream } from "../../lib/event-streams.js";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type ContinueRequest = {
    chatSessionId: string;
    continueChatSessionWithChatResultInput: components.ContinueChatSessionWithChatResultInput;
};

export type ContinueResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful Response
     */
    chatResult?: components.ChatResult | undefined;
    /**
     * Successful Response
     */
    chatResultStream?: EventStream<components.ChatResultStream> | undefined;
};

/** @internal */
export namespace ContinueRequest$ {
    export const inboundSchema: z.ZodType<ContinueRequest, z.ZodTypeDef, unknown> = z
        .object({
            chat_session_id: z.string(),
            ContinueChatSessionWithChatResultInput:
                components.ContinueChatSessionWithChatResultInput$.inboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                chat_session_id: "chatSessionId",
                ContinueChatSessionWithChatResultInput: "continueChatSessionWithChatResultInput",
            });
        });

    export type Outbound = {
        chat_session_id: string;
        ContinueChatSessionWithChatResultInput: components.ContinueChatSessionWithChatResultInput$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContinueRequest> = z
        .object({
            chatSessionId: z.string(),
            continueChatSessionWithChatResultInput:
                components.ContinueChatSessionWithChatResultInput$.outboundSchema,
        })
        .transform((v) => {
            return remap$(v, {
                chatSessionId: "chat_session_id",
                continueChatSessionWithChatResultInput: "ContinueChatSessionWithChatResultInput",
            });
        });
}

/** @internal */
export namespace ContinueResponse$ {
    export const inboundSchema: z.ZodType<ContinueResponse, z.ZodTypeDef, unknown> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            ChatResult: components.ChatResult$.inboundSchema.optional(),
            ChatResultStream: z
                .instanceof(ReadableStream<Uint8Array>)
                .transform((stream) => {
                    return new EventStream({
                        stream,
                        decoder(rawEvent) {
                            const schema = components.ChatResultStream$.inboundSchema;
                            return schema.parse(rawEvent);
                        },
                    });
                })
                .optional(),
        })
        .transform((v) => {
            return remap$(v, {
                ContentType: "contentType",
                StatusCode: "statusCode",
                RawResponse: "rawResponse",
                ChatResult: "chatResult",
                ChatResultStream: "chatResultStream",
            });
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        ChatResult?: components.ChatResult$.Outbound | undefined;
        ChatResultStream?: never | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ContinueResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            chatResult: components.ChatResult$.outboundSchema.optional(),
            chatResultStream: z.never().optional(),
        })
        .transform((v) => {
            return remap$(v, {
                contentType: "ContentType",
                statusCode: "StatusCode",
                rawResponse: "RawResponse",
                chatResult: "ChatResult",
                chatResultStream: "ChatResultStream",
            });
        });
}
