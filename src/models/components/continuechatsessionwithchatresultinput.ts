/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives";
import { Message, Message$ } from "./message";
import * as z from "zod";

export type ContinueChatSessionWithChatResultInput = {
    integrationId: string;
    message: Message;
    stream?: boolean | undefined;
};

/** @internal */
export namespace ContinueChatSessionWithChatResultInput$ {
    export const inboundSchema: z.ZodType<
        ContinueChatSessionWithChatResultInput,
        z.ZodTypeDef,
        unknown
    > = z
        .object({
            integration_id: z.string(),
            message: Message$.inboundSchema,
            stream: z.boolean().default(false),
        })
        .transform((v) => {
            return remap$(v, {
                integration_id: "integrationId",
            });
        });

    export type Outbound = {
        integration_id: string;
        message: Message$.Outbound;
        stream: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ContinueChatSessionWithChatResultInput
    > = z
        .object({
            integrationId: z.string(),
            message: Message$.outboundSchema,
            stream: z.boolean().default(false),
        })
        .transform((v) => {
            return remap$(v, {
                integrationId: "integration_id",
            });
        });
}
