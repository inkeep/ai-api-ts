/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RecordT, RecordT$ } from "./record";
import { z } from "zod";

export type Citation = {
    number?: number | undefined;
    record: RecordT;
    hitUrl?: string | null | undefined;
};

/** @internal */
export namespace Citation$ {
    export type Inbound = {
        number?: number | undefined;
        record: RecordT$.Inbound;
        hit_url?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Citation, z.ZodTypeDef, Inbound> = z
        .object({
            number: z.number().int().optional(),
            record: RecordT$.inboundSchema,
            hit_url: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                record: v.record,
                ...(v.hit_url === undefined ? null : { hitUrl: v.hit_url }),
            };
        });

    export type Outbound = {
        number?: number | undefined;
        record: RecordT$.Outbound;
        hit_url?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Citation> = z
        .object({
            number: z.number().int().optional(),
            record: RecordT$.outboundSchema,
            hitUrl: z.nullable(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.number === undefined ? null : { number: v.number }),
                record: v.record,
                ...(v.hitUrl === undefined ? null : { hit_url: v.hitUrl }),
            };
        });
}
