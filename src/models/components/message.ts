/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AssistantMessage, AssistantMessage$ } from "./assistantmessage";
import { UserMessage, UserMessage$ } from "./usermessage";
import { z } from "zod";

export type Message = (UserMessage & { role: "user" }) | (AssistantMessage & { role: "assistant" });

/** @internal */
export namespace Message$ {
    export type Inbound =
        | (UserMessage$.Inbound & { role: "user" })
        | (AssistantMessage$.Inbound & { role: "assistant" });

    export type Outbound =
        | (UserMessage$.Outbound & { role: "user" })
        | (AssistantMessage$.Outbound & { role: "assistant" });

    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, Inbound> = z.union([
        UserMessage$.inboundSchema.and(z.object({ role: z.literal("user") })),
        AssistantMessage$.inboundSchema.and(z.object({ role: z.literal("assistant") })),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z.union([
        UserMessage$.outboundSchema.and(z.object({ role: z.literal("user") })),
        AssistantMessage$.outboundSchema.and(z.object({ role: z.literal("assistant") })),
    ]);
}
