/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AssistantMessage, AssistantMessage$ } from "./assistantmessage.js";
import { UserMessage, UserMessage$ } from "./usermessage.js";
import * as z from "zod";

export type Message = (UserMessage & { role: "user" }) | (AssistantMessage & { role: "assistant" });

/** @internal */
export namespace Message$ {
    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, unknown> = z.union([
        UserMessage$.inboundSchema.and(
            z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))
        ),
        AssistantMessage$.inboundSchema.and(
            z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))
        ),
    ]);

    export type Outbound =
        | (UserMessage$.Outbound & { role: "user" })
        | (AssistantMessage$.Outbound & { role: "assistant" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z.union([
        UserMessage$.outboundSchema.and(
            z.object({ role: z.literal("user") }).transform((v) => ({ role: v.role }))
        ),
        AssistantMessage$.outboundSchema.and(
            z.object({ role: z.literal("assistant") }).transform((v) => ({ role: v.role }))
        ),
    ]);
}
