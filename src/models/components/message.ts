/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AssistantMessage, AssistantMessage$, AssistantMessageRole } from "./assistantmessage";
import { Role, UserMessage, UserMessage$ } from "./usermessage";
import { z } from "zod";

export type Message =
    | (UserMessage & { role: Role.User })
    | (AssistantMessage & { role: AssistantMessageRole.Assistant });

/** @internal */
export namespace Message$ {
    export type Inbound =
        | (UserMessage$.Inbound & { role: Role.User })
        | (AssistantMessage$.Inbound & { role: AssistantMessageRole.Assistant });

    export type Outbound =
        | (UserMessage$.Outbound & { role: Role.User })
        | (AssistantMessage$.Outbound & { role: AssistantMessageRole.Assistant });

    export const inboundSchema: z.ZodType<Message, z.ZodTypeDef, Inbound> = z.union([
        UserMessage$.inboundSchema.and(
            z.object({ role: z.literal(Role.User) }).transform((v) => ({ role: v.role }))
        ),
        AssistantMessage$.inboundSchema.and(
            z
                .object({ role: z.literal(AssistantMessageRole.Assistant) })
                .transform((v) => ({ role: v.role }))
        ),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Message> = z.union([
        UserMessage$.outboundSchema.and(
            z.object({ role: z.literal(Role.User) }).transform((v) => ({ role: v.role }))
        ),
        AssistantMessage$.outboundSchema.and(
            z
                .object({ role: z.literal(AssistantMessageRole.Assistant) })
                .transform((v) => ({ role: v.role }))
        ),
    ]);
}
