/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ChatSessionInput, ChatSessionInput$ } from "./chatsessioninput";
import { z } from "zod";

export enum ChatModeOptions {
    Turbo = "turbo",
    Auto = "auto",
}

export type ChatMode = ChatModeOptions | string;

export type CreateChatSessionWithChatResultInput = {
    integrationId: string;
    chatSession: ChatSessionInput;
    chatMode?: ChatModeOptions | string | undefined;
    stream?: boolean | undefined;
};

/** @internal */
export const ChatModeOptions$ = z.nativeEnum(ChatModeOptions);

/** @internal */
export namespace ChatMode$ {
    export type Inbound = ChatModeOptions | string;

    export type Outbound = ChatModeOptions | string;

    export const inboundSchema: z.ZodType<ChatMode, z.ZodTypeDef, Inbound> = z.union([
        ChatModeOptions$,
        z.string(),
    ]);

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatMode> = z.union([
        ChatModeOptions$,
        z.string(),
    ]);
}

/** @internal */
export namespace CreateChatSessionWithChatResultInput$ {
    export type Inbound = {
        integration_id: string;
        chat_session: ChatSessionInput$.Inbound;
        chat_mode?: ChatModeOptions | string | undefined;
        stream?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        CreateChatSessionWithChatResultInput,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            integration_id: z.string(),
            chat_session: ChatSessionInput$.inboundSchema,
            chat_mode: z.union([ChatModeOptions$, z.string()]).optional(),
            stream: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                integrationId: v.integration_id,
                chatSession: v.chat_session,
                ...(v.chat_mode === undefined ? null : { chatMode: v.chat_mode }),
                stream: v.stream,
            };
        });

    export type Outbound = {
        integration_id: string;
        chat_session: ChatSessionInput$.Outbound;
        chat_mode?: ChatModeOptions | string | undefined;
        stream: boolean;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        CreateChatSessionWithChatResultInput
    > = z
        .object({
            integrationId: z.string(),
            chatSession: ChatSessionInput$.outboundSchema,
            chatMode: z.union([ChatModeOptions$, z.string()]).optional(),
            stream: z.boolean().default(false),
        })
        .transform((v) => {
            return {
                integration_id: v.integrationId,
                chat_session: v.chatSession,
                ...(v.chatMode === undefined ? null : { chat_mode: v.chatMode }),
                stream: v.stream,
            };
        });
}
