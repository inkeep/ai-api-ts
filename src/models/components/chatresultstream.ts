/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ChatResultMessageChunkEvent,
    ChatResultMessageChunkEvent$,
} from "./chatresultmessagechunkevent.js";
import {
    ChatResultRecordsCitedEvent,
    ChatResultRecordsCitedEvent$,
} from "./chatresultrecordscitedevent.js";
import * as z from "zod";

export type ChatResultStream =
    | (ChatResultMessageChunkEvent & { event: "message_chunk" })
    | (ChatResultRecordsCitedEvent & { event: "records_cited" });

/** @internal */
export namespace ChatResultStream$ {
    export const inboundSchema: z.ZodType<ChatResultStream, z.ZodTypeDef, unknown> = z.union([
        ChatResultMessageChunkEvent$.inboundSchema.and(
            z.object({ event: z.literal("message_chunk") }).transform((v) => ({ event: v.event }))
        ),
        ChatResultRecordsCitedEvent$.inboundSchema.and(
            z.object({ event: z.literal("records_cited") }).transform((v) => ({ event: v.event }))
        ),
    ]);

    export type Outbound =
        | (ChatResultMessageChunkEvent$.Outbound & { event: "message_chunk" })
        | (ChatResultRecordsCitedEvent$.Outbound & { event: "records_cited" });
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResultStream> = z.union([
        ChatResultMessageChunkEvent$.outboundSchema.and(
            z.object({ event: z.literal("message_chunk") }).transform((v) => ({ event: v.event }))
        ),
        ChatResultRecordsCitedEvent$.outboundSchema.and(
            z.object({ event: z.literal("records_cited") }).transform((v) => ({ event: v.event }))
        ),
    ]);
}
