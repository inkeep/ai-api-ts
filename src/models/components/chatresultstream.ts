/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    ChatResultMessageChunkEvent,
    ChatResultMessageChunkEvent$,
    Event,
} from "./chatresultmessagechunkevent";
import {
    ChatResultRecordsCitedEvent,
    ChatResultRecordsCitedEvent$,
    ChatResultRecordsCitedEventEvent,
} from "./chatresultrecordscitedevent";
import * as z from "zod";

export type ChatResultStream =
    | (ChatResultMessageChunkEvent & { event: Event.MessageChunk })
    | (ChatResultRecordsCitedEvent & { event: ChatResultRecordsCitedEventEvent.RecordsCited });

/** @internal */
export namespace ChatResultStream$ {
    export type Inbound =
        | (ChatResultMessageChunkEvent$.Inbound & { event: Event.MessageChunk })
        | (ChatResultRecordsCitedEvent$.Inbound & {
              event: ChatResultRecordsCitedEventEvent.RecordsCited;
          });

    export type Outbound =
        | (ChatResultMessageChunkEvent$.Outbound & { event: Event.MessageChunk })
        | (ChatResultRecordsCitedEvent$.Outbound & {
              event: ChatResultRecordsCitedEventEvent.RecordsCited;
          });
    export const inboundSchema: z.ZodType<ChatResultStream, z.ZodTypeDef, Inbound> = z.union([
        ChatResultMessageChunkEvent$.inboundSchema.and(
            z
                .object({ event: z.literal(Event.MessageChunk) })
                .transform((v) => ({ event: v.event }))
        ),
        ChatResultRecordsCitedEvent$.inboundSchema.and(
            z
                .object({ event: z.literal(ChatResultRecordsCitedEventEvent.RecordsCited) })
                .transform((v) => ({ event: v.event }))
        ),
    ]);
    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResultStream> = z.union([
        ChatResultMessageChunkEvent$.outboundSchema.and(
            z
                .object({ event: z.literal(Event.MessageChunk) })
                .transform((v) => ({ event: v.event }))
        ),
        ChatResultRecordsCitedEvent$.outboundSchema.and(
            z
                .object({ event: z.literal(ChatResultRecordsCitedEventEvent.RecordsCited) })
                .transform((v) => ({ event: v.event }))
        ),
    ]);
}
