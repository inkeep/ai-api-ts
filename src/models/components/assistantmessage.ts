/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RecordsCited, RecordsCited$ } from "./recordscited";
import * as z from "zod";

export enum AssistantMessageRole {
    Assistant = "assistant",
}

export type AssistantMessage = {
    role: AssistantMessageRole;
    content: string;
    recordsCited?: RecordsCited | undefined;
};

/** @internal */
export const AssistantMessageRole$ = z.nativeEnum(AssistantMessageRole);

/** @internal */
export namespace AssistantMessage$ {
    export type Inbound = {
        role: AssistantMessageRole;
        content: string;
        records_cited?: RecordsCited$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<AssistantMessage, z.ZodTypeDef, Inbound> = z
        .object({
            role: AssistantMessageRole$,
            content: z.string(),
            records_cited: RecordsCited$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                role: v.role,
                content: v.content,
                ...(v.records_cited === undefined ? null : { recordsCited: v.records_cited }),
            };
        });

    export type Outbound = {
        role: AssistantMessageRole;
        content: string;
        records_cited?: RecordsCited$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssistantMessage> = z
        .object({
            role: AssistantMessageRole$,
            content: z.string(),
            recordsCited: RecordsCited$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                role: v.role,
                content: v.content,
                ...(v.recordsCited === undefined ? null : { records_cited: v.recordsCited }),
            };
        });
}
