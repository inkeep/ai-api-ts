/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { RecordsCited, RecordsCited$ } from "./recordscited.js";
import * as z from "zod";

export type AssistantMessage = {
    role?: "assistant" | undefined;
    content: string;
    recordsCited?: RecordsCited | undefined;
};

/** @internal */
export namespace AssistantMessage$ {
    export const inboundSchema: z.ZodType<AssistantMessage, z.ZodTypeDef, unknown> = z
        .object({
            role: z.literal("assistant").optional(),
            content: z.string(),
            records_cited: RecordsCited$.inboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                records_cited: "recordsCited",
            });
        });

    export type Outbound = {
        role: "assistant";
        content: string;
        records_cited?: RecordsCited$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssistantMessage> = z
        .object({
            role: z.literal("assistant").default("assistant" as const),
            content: z.string(),
            recordsCited: RecordsCited$.outboundSchema.optional(),
        })
        .transform((v) => {
            return remap$(v, {
                recordsCited: "records_cited",
            });
        });
}
