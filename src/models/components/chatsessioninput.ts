/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Message, Message$ } from "./message";
import * as z from "zod";

export type ChatSessionInput = {
    guidance?: string | null | undefined;
    context?: string | null | undefined;
    messages: Array<Message>;
    tags?: Array<string> | undefined;
};

/** @internal */
export namespace ChatSessionInput$ {
    export const inboundSchema: z.ZodType<ChatSessionInput, z.ZodTypeDef, unknown> = z.object({
        guidance: z.nullable(z.string()).optional(),
        context: z.nullable(z.string()).optional(),
        messages: z.array(Message$.inboundSchema),
        tags: z.array(z.string()).optional(),
    });

    export type Outbound = {
        guidance?: string | null | undefined;
        context?: string | null | undefined;
        messages: Array<Message$.Outbound>;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatSessionInput> = z.object({
        guidance: z.nullable(z.string()).optional(),
        context: z.nullable(z.string()).optional(),
        messages: z.array(Message$.outboundSchema),
        tags: z.array(z.string()).optional(),
    });
}
