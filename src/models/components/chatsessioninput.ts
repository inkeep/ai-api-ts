/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Message, Message$ } from "./message";
import { z } from "zod";

export type ChatSessionInput = {
    messages: Array<Message>;
};

/** @internal */
export namespace ChatSessionInput$ {
    export type Inbound = {
        messages: Array<Message$.Inbound>;
    };

    export const inboundSchema: z.ZodType<ChatSessionInput, z.ZodTypeDef, Inbound> = z
        .object({
            messages: z.array(Message$.inboundSchema),
        })
        .transform((v) => {
            return {
                messages: v.messages,
            };
        });

    export type Outbound = {
        messages: Array<Message$.Outbound>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatSessionInput> = z
        .object({
            messages: z.array(Message$.outboundSchema),
        })
        .transform((v) => {
            return {
                messages: v.messages,
            };
        });
}
