/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RecordsCited, RecordsCited$ } from "./recordscited";
import { z } from "zod";

/**
 * A server-sent event with information about the records cited in the message.
 */
export type ChatResultRecordsCitedEvent = {
    event: "records_cited";
    data: RecordsCited;
};

/** @internal */
export namespace ChatResultRecordsCitedEvent$ {
    export type Inbound = {
        event: "records_cited";
        data: string;
    };

    export const inboundSchema: z.ZodType<ChatResultRecordsCitedEvent, z.ZodTypeDef, Inbound> = z
        .object({
            event: z.literal("records_cited"),
            data: z
                .string()
                .transform((v, ctx) => {
                    try {
                        return JSON.parse(v);
                    } catch (err) {
                        ctx.addIssue({
                            code: z.ZodIssueCode.custom,
                            message: `malformed json: ${err}`,
                        });
                        return z.NEVER;
                    }
                })
                .pipe(RecordsCited$.inboundSchema),
        })
        .transform((v) => {
            return {
                event: v.event,
                data: v.data,
            };
        });

    export type Outbound = {
        event: "records_cited";
        data: RecordsCited$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ChatResultRecordsCitedEvent> = z
        .object({
            event: z.literal("records_cited"),
            data: RecordsCited$.outboundSchema,
        })
        .transform((v) => {
            return {
                event: v.event,
                data: v.data,
            };
        });
}
